package com.example.projectdemo.domain.auth.jwt;

import com.example.projectdemo.domain.employees.dto.EmployeesDTO;
import com.example.projectdemo.domain.employees.mapper.EmployeesMapper;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.*;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.AntPathMatcher;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtTokenUtil jwtTokenUtil;
    private final EmployeesMapper employeeMapper;
    private final ObjectMapper objectMapper;
    private final AntPathMatcher pathMatcher = new AntPathMatcher();

    // Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïòÏßÄ ÏïäÏùÄ Í≤ΩÎ°ú Î™©Î°ù
    private final List<String> allowedPaths = Arrays.asList(
            "/api/auth/login",
            "/api/auth/refresh-token",
            "/api/auth/register",
            "/api/auth/reset-password",
            "/api/auth/verify-employee",
            "/auth/**",
            "/error",
            "/",
            "/resources/**",
            "/static/**",
            "/css/**",
            "/js/**",
            "/assets/**",
            "/images/**",
            "/ws/**",
            "/ws"
    );

    @Autowired
    public JwtAuthenticationFilter(JwtTokenUtil jwtTokenUtil, EmployeesMapper employeeMapper, ObjectMapper objectMapper) {
        this.jwtTokenUtil = jwtTokenUtil;
        this.employeeMapper = employeeMapper;
        this.objectMapper = objectMapper;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
            String origin = request.getHeader("Origin");

            List<String> allowedOrigins = List.of(
                    "http://10.10.55.57:3000",
                    "http://groupware.techx.kro.kr",
                    "https://techx-groupware.web.app"
            );

            if (allowedOrigins.contains(origin)) {
                response.setHeader("Access-Control-Allow-Origin", origin);  // üî• ÎèôÏ†ÅÏúºÎ°ú Î∞òÏòÅ
            }

            response.setHeader("Access-Control-Allow-Credentials", "true");
            response.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
            response.setHeader("Access-Control-Allow-Headers", "Authorization, Content-Type");
            response.setHeader("Access-Control-Max-Age", "3600");
            response.setStatus(HttpServletResponse.SC_OK);
            return;
        }

        String requestURI = request.getRequestURI();

        // Ïù∏Ï¶ùÏù¥ ÌïÑÏöî ÏóÜÎäî Í≤ΩÎ°úÎäî ÌÜµÍ≥º
        if (isAllowedPath(requestURI)) {
            filterChain.doFilter(request, response);
            return;
        }

        // ÌÜ†ÌÅ∞ Ï∂îÏ∂ú ÏãúÎèÑ
        String token = null;

        // 1. Ìó§ÎçîÏóêÏÑú ÌÜ†ÌÅ∞ ÌôïÏù∏
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7);
        }

        // 2. ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏúºÎ©¥ Ïø†ÌÇ§ÏóêÏÑú ÌôïÏù∏
        if (token == null) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {
                    if ("accessToken".equals(cookie.getName())) {
                        token = cookie.getValue();
                        break;
                    }
                }
            }
        }

        if (token == null) {
            sendErrorResponse(response, 401, "Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
            return;
        }

        try {
            // ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
            boolean isValid = jwtTokenUtil.validateToken(token);

            if (!isValid) {
                sendErrorResponse(response, 401, "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌÜ†ÌÅ∞ÏûÖÎãàÎã§.");
                return;
            }

            // ÌÜ†ÌÅ∞ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú
            String empNum = jwtTokenUtil.getEmpNumFromToken(token);
            String role = jwtTokenUtil.getRoleFromToken(token);
            boolean tempPassword = jwtTokenUtil.getTempPasswordStatusFromToken(token);

            // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
            EmployeesDTO employee = employeeMapper.findByEmpNum(empNum);

            if (employee == null || !employee.isEnabled()) {
                sendErrorResponse(response, 401, "ÎπÑÌôúÏÑ±ÌôîÎêú Í≥ÑÏ†ïÏûÖÎãàÎã§.");
                return;
            }
            int id = jwtTokenUtil.getIdFromToken(token);

            // ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉÅÌÉú ÌôïÏù∏ (ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω ÌéòÏù¥ÏßÄÎ°úÏùò Ï†ëÍ∑ºÏùÄ ÌóàÏö©)
            if (tempPassword && !requestURI.contains("/api/auth/change-password")) {
                sendErrorResponse(response, 403, "ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", true);
                return;
            }
            try {
                employeeMapper.updateLastLogin(empNum, LocalDateTime.now());
            } catch (Exception e) {
                logger.warn("ÎßàÏßÄÎßâ Î°úÍ∑∏Ïù∏ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®", e);
            }

            // ÏöîÏ≤≠ ÏÜçÏÑ±Ïóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï
            request.setAttribute("id", id);
            request.setAttribute("empNum", empNum);
            request.setAttribute("role", role);
            request.setAttribute("tempPassword", tempPassword);

            // ÏöîÏ≤≠ ÏßÑÌñâ
            filterChain.doFilter(request, response);

        } catch (Exception e) {
            e.printStackTrace();
            sendErrorResponse(response, 401, "Ïù∏Ï¶ù Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        }
    }

    private boolean isAllowedPath(String requestURI) {
        return allowedPaths.stream()
                .anyMatch(path -> pathMatcher.match(path, requestURI));
    }

    private void sendErrorResponse(HttpServletResponse response, int status, String message) throws IOException {
        sendErrorResponse(response, status, message, false);
    }

    private void sendErrorResponse(HttpServletResponse response, int status, String message, boolean passwordChangeRequired) throws IOException {
        response.setStatus(status);
        response.setContentType("application/json");

        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("status", status);
        errorResponse.put("error", status == 401 ? "Unauthorized" : "Forbidden");
        errorResponse.put("message", message);

        if (passwordChangeRequired) {
            errorResponse.put("requirePasswordChange", true);
        }

        response.getWriter().write(objectMapper.writeValueAsString(errorResponse));
    }
}