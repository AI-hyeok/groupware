document.addEventListener('DOMContentLoaded', function () {
    const calendarEl = document.getElementById('calendar');
    const modalBackdrop = document.getElementById('modalBackdrop');
    const eventModal = document.getElementById('eventModal');

    // Î™®Îã¨ Îã´Í∏∞ Ìï®ÏàòÎ•º Ï†ÑÏó≠ÏúºÎ°ú Ï†ïÏùò
    window.closeModal = function() {
        eventModal.style.display = 'none';
        modalBackdrop.style.display = 'none';
    };

    // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && eventModal.style.display === 'block') {
            closeModal();
        }
    });

    // Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠Ïãú Îã´Í∏∞
    modalBackdrop.addEventListener('click', function() {
        closeModal();
    });

    const calendar = new FullCalendar.Calendar(calendarEl, {
        locale: 'ko',
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        eventTimeFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        },
        events: function (fetchInfo, successCallback, failureCallback) {
            fetch('/works/getWorkSchedule')
                .then(response => response.json())
                .then(data => {
                    const events = data.map(item => {
                        const event = {
                            title: item.title,
                            start: item.start,
                            end: item.end,
                            description: item.description,
                            allDay: item.end && !item.start.includes('T'),
                            extendedProps: {
                                type: item.type || 'normal',
                                description: item.description
                            }
                        };

                        // Ïä§ÌÉÄÏùº Ï°∞Í±¥
                        if (item.title.includes('Ìú¥Í∞Ä')) {
                            event.title = 'üå¥ ' + item.title;
                            event.backgroundColor = item.color || '#edd67a';
                            event.textColor = '#fff';
                            event.extendedProps.type = 'leave';
                        } else if (item.type === 'overtime' || item.title.includes('Ïó∞Ïû• Í∑ºÎ¨¥')) {
                            event.title = '‚è±Ô∏è ' + item.title;
                            event.backgroundColor = item.color || '#6f42c1';
                            event.textColor = '#fff';
                            event.extendedProps.type = 'overtime';
                        } else {
                            if (item.title.includes('Ï∂úÍ∑º')) {
                                event.backgroundColor = '#28a745'; // Ï¥àÎ°ù
                                event.title = 'üè¢ ' + item.title;
                            } else if (item.title.includes('Ìá¥Í∑º')) {
                                event.backgroundColor = '#007bff'; // ÌååÎûë
                                event.title = 'üö∂ ' + item.title;
                            } else if (item.title.includes('ÏßÄÍ∞Å')) {
                                event.backgroundColor = '#dc3545'; // Îπ®Í∞ï
                                event.title = '‚ö†Ô∏è ' + item.title;
                            }
                        }

                        return event;
                    });
                    successCallback(events);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                    failureCallback(error);
                });
        },
        eventClick: function (info) {
            const { title, extendedProps, start, end } = info.event;
            const modalTitle = document.getElementById('modalTitle');
            const modalTime = document.getElementById('modalTime');
            const modalReason = document.getElementById('modalReason');

            // Î™®Îã¨ Ï†úÎ™© ÏÑ§Ï†ï
            modalTitle.innerText = title;

            // Î™®Îã¨ ÎÇ¥Ïö© Ï¥àÍ∏∞Ìôî
            modalTime.innerHTML = '';
            modalReason.innerHTML = '';

            // Ïù¥Î≤§Ìä∏ Ïú†ÌòïÏóê Îî∞Î•∏ Î™®Îã¨ ÎÇ¥Ïö© ÏÑ§Ï†ï
            if (extendedProps.type === 'leave') {
                // Ìú¥Í∞Ä Ïù¥Î≤§Ìä∏
                if (start && end) {
                    const formattedStart = start.toLocaleDateString('ko-KR', { year: 'numeric', month: '2-digit', day: '2-digit' });
                    let formattedEnd = '';

                    if (end.getDate() !== start.getDate() || end.getMonth() !== start.getMonth() || end.getFullYear() !== start.getFullYear()) {
                        formattedEnd = end.toLocaleDateString('ko-KR', { year: 'numeric', month: '2-digit', day: '2-digit' });
                        modalTime.innerHTML = `<i class="fas fa-calendar-alt"></i> Í∏∞Í∞Ñ: ${formattedStart} ~ ${formattedEnd}`;
                    } else {
                        modalTime.innerHTML = `<i class="fas fa-calendar-day"></i> ÎÇ†Ïßú: ${formattedStart}`;
                    }
                }

                if (extendedProps.description) {
                    modalReason.innerHTML = `<i class="fas fa-comment"></i> ${extendedProps.description}`;
                }
            } else if (extendedProps.type === 'overtime') {
                // Ïó∞Ïû• Í∑ºÎ¨¥ Ïù¥Î≤§Ìä∏
                if (start && end) {
                    const formattedDate = start.toLocaleDateString('ko-KR', { year: 'numeric', month: '2-digit', day: '2-digit' });
                    const formattedStartTime = start.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit', hour12: false });
                    const formattedEndTime = end.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit', hour12: false });

                    modalTime.innerHTML = `
                        <i class="fas fa-calendar-day"></i> ÎÇ†Ïßú: ${formattedDate}<br>
                        <i class="fas fa-clock"></i> ÏãúÍ∞Ñ: ${formattedStartTime} ~ ${formattedEndTime}
                    `;
                }

                if (extendedProps.description) {
                    modalReason.innerHTML = `<i class="fas fa-comment"></i> ÏÇ¨Ïú†: ${extendedProps.description}`;
                }
            } else {
                // ÏùºÎ∞ò Ï∂úÌá¥Í∑º Ïù¥Î≤§Ìä∏
                if (start) {
                    const formattedDate = start.toLocaleDateString('ko-KR', { year: 'numeric', month: '2-digit', day: '2-digit' });
                    const formattedTime = start.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit', hour12: false });

                    modalTime.innerHTML = `
                        <i class="fas fa-calendar-day"></i> ÎÇ†Ïßú: ${formattedDate}<br>
                        <i class="fas fa-clock"></i> ÏãúÍ∞Ñ: ${formattedTime}
                    `;
                }

                if (extendedProps.description) {
                    modalReason.innerHTML = `<i class="fas fa-info-circle"></i> ${extendedProps.description}`;
                }
            }

            // Î™®Îã¨ ÌëúÏãú
            modalBackdrop.style.display = 'block';
            eventModal.style.display = 'block';
        }
    });

    calendar.render();
});