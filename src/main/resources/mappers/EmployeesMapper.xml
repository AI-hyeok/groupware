<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.projectdemo.domain.employees.mapper.EmployeesMapper">
    <resultMap id="EmployeeResultMap" type="com.example.projectdemo.domain.employees.entity.Employees">
        <id property="id" column="id" />
        <result property="empNum" column="emp_num" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="gender" column="gender" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="internalEmail" column="internal_email" />
        <result property="profileImgUrl" column="profile_img_url" />
        <result property="ssn" column="ssn" />
        <result property="depId" column="dep_id" />
        <result property="posId" column="pos_id" />
        <result property="hireDate" column="hire_date" />
        <result property="retirementId" column="retirement_id" />
        <result property="attendStatus" column="attend_status" />
        <result property="salary" column="salary" />
        <result property="enabled" column="enabled" />
        <result property="role" column="role" />
        <result property="lastLogin" column="last_login" />
        <result property="registered" column="registered" />
        <result property="temp_password" column="temp_password" />
        <result property="totalLeave" column="total_leave" />
        <result property="usedLeave" column="used_leave" />
    </resultMap>

    <!-- 재사용 가능한 컬럼 정의 -->
    <sql id="employeeColumns">
        id, emp_num as empNum, password, name, gender, phone, email, internal_email as InternalEmail,
        profile_img_url as profileImgUrl, ssn, dep_id as depId,
        pos_id as posId, hire_date as hireDate,
        retirement_id as retirementId, attend_status as attendStatus,
        salary, enabled, role, last_login as lastLogin, registered,
        temp_password as temp_password, total_leave as totalLeave,
        used_leave as usedLeave
    </sql>

    <select id="selectEmpAll" resultType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        SELECT * FROM employees
    </select>


    <select id="findAllEmployeeIds" resultType="int">
        SELECT id FROM employees
    </select>


    <!-- 사원번호로 직원 조회 (DTO 반환) -->
    <select id="findByEmpNum" resultType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        SELECT
        <include refid="employeeColumns" />
        FROM
        employees
        WHERE
        emp_num = #{empNum}
    </select>

    <!-- 사원 ID로 직원 조회 (DTO 반환) -->
    <select id="findById" resultType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        SELECT
        <include refid="employeeColumns" />
        FROM
        employees
        WHERE
        id = #{empId}
    </select>

    <!-- 이메일로 직원 조회 -->
    <select id="findByEmail" resultType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        SELECT
        <include refid="employeeColumns" />
        FROM
        employees
        WHERE
        email = #{email}
    </select>

    <!-- 사원번호, 이름, 이메일, 주민번호로 직원 조회 -->
    <select id="findByEmpNumAndNameAndEmailAndSsn" resultType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        SELECT
        <include refid="employeeColumns" />
        FROM
        employees
        WHERE
        emp_num = #{empNum}
        AND name = #{name}
        AND email = #{email}
        AND ssn = #{ssn}
    </select>

    <!-- 회원가입 정보 업데이트 -->
    <update id="updateRegistrationStatus">
        UPDATE
            employees
        SET
            registered = #{registered},
            password = #{password},
            profile_img_url = #{profileImgUrl},
            phone = #{phone},
            gender = #{gender},
            temp_password = #{tempPassword},
            internal_email = #{internalEmail}
        WHERE
            emp_num = #{empNum}
    </update>

    <!-- 비밀번호 업데이트 -->
    <update id="updatePassword">
        UPDATE
            employees
        SET
            password = #{password},
            temp_password = #{tempPassword}
        WHERE
            emp_num = #{empNum}
    </update>

    <!-- 마지막 로그인 시간 업데이트 -->
    <update id="updateLastLogin">
        UPDATE
            employees
        SET
            last_login = #{lastLogin}
        WHERE
            emp_num = #{empNum}
    </update>

    <!-- 출결 상태 업데이트 -->
    <update id="updateAttendStatus">
        UPDATE
            employees
        SET
            attend_status = #{attendStatus}
        WHERE
            id = #{empId}
    </update>

    <!-- 마지막 로그인 시간 조회 -->
    <select id="selectLastLogin">
        SELECT
            last_login
        FROM
            employees
        WHERE
            emp_num = #{empNum}
    </select>

    <!-- 마이페이지 회원정보(프로필이미지, 전화번호, 개인이메일) 수정 -->
    <update id="updateEmpInfo">
        UPDATE
            employees
        SET
            phone = #{updatedEmp.phone},
            email = #{updatedEmp.email}
            <if test="updatedEmp.profileImgUrl != null">
                , profile_img_url = #{updatedEmp.profileImgUrl}
            </if>
        WHERE
            emp_num = #{updatedEmp.empNum}
    </update>

    <!-- 직원 정보 업데이트 (관리자용) -->
    <update id="updateEmployee" parameterType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        UPDATE employees
        SET
            name = #{name},
            email = #{email},
            phone = #{phone},
            dep_id = #{depId},
            pos_id = #{posId},
            role = #{role},
            enabled = #{enabled}
        WHERE id = #{id}
    </update>

    <!-- 직원 비활성화 (관리자용) -->
    <update id="deactivateEmployee">
        UPDATE employees
        SET enabled = false
        WHERE id = #{id}
    </update>

    <update id="updateProfileImgUrl">
        UPDATE employees
        SET profile_img_url = #{profileImgUrl}
        WHERE emp_num = #{empNum}
    </update>

    <!-- 필터를 적용한 사원 조회 (페이지네이션 포함) -->
    <select id="selectEmployeesWithFilters" parameterType="java.util.Map" resultType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        SELECT
        <include refid="employeeColumns" />
        FROM
        employees
        <where>
            <if test="searchTerm != null and searchTerm != ''">
                (name LIKE CONCAT('%', #{searchTerm}, '%')
                OR emp_num LIKE CONCAT('%', #{searchTerm}, '%')
                OR email LIKE CONCAT('%', #{searchTerm}, '%'))
            </if>
            <if test="deptId != null">
                AND dep_id = #{deptId}
            </if>
            <if test="posId != null">
                AND pos_id = #{posId}
            </if>
        </where>
        ORDER BY id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 필터를 적용한 사원 수 조회 -->
    <select id="countEmployeesWithFilters" parameterType="java.util.Map" resultType="int">
        SELECT
        COUNT(*)
        FROM
        employees
        <where>
            <if test="searchTerm != null and searchTerm != ''">
                (name LIKE CONCAT('%', #{searchTerm}, '%')
                OR emp_num LIKE CONCAT('%', #{searchTerm}, '%')
                OR email LIKE CONCAT('%', #{searchTerm}, '%'))
            </if>
            <if test="deptId != null">
                AND dep_id = #{deptId}
            </if>
            <if test="posId != null">
                AND pos_id = #{posId}
            </if>
        </where>
    </select>

    <!-- 직원 활성화 (관리자용) -->
    <update id="activateEmployee">
        UPDATE employees
        SET enabled = true
        WHERE id = #{id}
    </update>

    <!--  관리자 권한(ROLE_ADMIN)을 가진 사원의 ID 목록을 조회 -->
    <select id="getAdminIds" resultType="java.lang.Integer">
        SELECT id
        FROM employees
        WHERE role = 'ROLE_ADMIN'
          AND enabled = 1
          AND id IS NOT NULL
    </select>

    <!--  활성화된 직원 목록 가져오기  -->
    <select id="getAllActiveEmployees" resultType="com.example.projectdemo.domain.employees.dto.EmployeesDTO">
        SELECT id,
               emp_num,
               name,
               gender,
               phone,
               email,
               internal_email,
               profile_img_url,
               dep_id,
               pos_id
        FROM employees
        WHERE enabled = 1
        ORDER BY name
    </select>

    <!-- 직원 추가 -->
    <insert id="insertEmployee" parameterType="com.example.projectdemo.domain.employees.dto.EmployeesDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO employees (
            emp_num,
            password,
            name,
            gender,
            phone,
            email,
            profile_img_url,
            ssn,
            dep_id,
            pos_id,
            hire_date,
            retirement_id,
            attend_status,
            salary,
            enabled,
            role,
            registered,
            temp_password,
            total_leave,
            used_leave
        ) VALUES (
                     #{empNum},
                     #{password},
                     #{name},
                     #{gender},
                     #{phone},
                     #{email},
                     #{profileImgUrl},
                     #{ssn},
                     #{depId},
                     #{posId},
                     #{hireDate},
                     #{retirementId},
                     #{attendStatus},
                     #{salary},
                     #{enabled},
                     #{role},
                     #{registered},
                     #{temp_password},
                     #{totalLeave},
                     #{usedLeave}
                 )
    </insert>
    <update id="updateByDepId" parameterType="int">
        UPDATE employees
        SET dep_id = (SELECT id FROM departments WHERE name = '이동중')
        WHERE dep_id = #{id}
    </update>



</mapper>