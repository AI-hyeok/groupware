<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.projectdemo.domain.projects.mapper.ProjectMapper">

    <!-- Update the ProjectResultMap to include all fields -->
    <resultMap id="ProjectResultMap" type="com.example.projectdemo.domain.projects.dto.ProjectDTO">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="description" column="description" />
        <result property="status" column="status" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="actualEndDate" column="actual_end_date" />
        <result property="depId" column="dep_id" />
        <result property="depName" column="dep_name" />
        <result property="managerEmpNum" column="manager_emp_num" />
        <result property="managerName" column="manager_name" />
        <result property="progress" column="progress" />
        <result property="isPublic" column="is_public" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
    </resultMap>

    <!-- 프로젝트 멤버 기본 결과 매핑 -->
    <resultMap id="ProjectMemberResultMap" type="com.example.projectdemo.domain.projects.dto.ProjectMemberDTO">
        <id property="id" column="id" />
        <result property="projectId" column="project_id" />
        <result property="empNum" column="emp_num" />
        <result property="name" column="name" />
        <result property="depName" column="dep_name" />
        <result property="posTitle" column="pos_title" />
        <result property="role" column="role" />
        <result property="joinedAt" column="joined_at" />
        <result property="leftAt" column="left_at" />
    </resultMap>

    <!-- 모든 프로젝트 조회 -->
    <select id="findAllProjects" resultMap="ProjectResultMap">
        SELECT p.*, d.name AS dep_name, e.name AS manager_name
        FROM projects p
                 LEFT JOIN departments d ON p.dep_id = d.id
                 LEFT JOIN employees e ON p.manager_emp_num = e.emp_num
        ORDER BY p.created_at DESC
    </select>

    <!-- 프로젝트 ID로 프로젝트 조회 -->
    <select id="findProjectById" parameterType="Integer" resultMap="ProjectResultMap">
        SELECT p.*, d.name AS dep_name, e.name AS manager_name
        FROM projects p
                 LEFT JOIN departments d ON p.dep_id = d.id
                 LEFT JOIN employees e ON p.manager_emp_num = e.emp_num
        WHERE p.id = #{id}
    </select>

    <!-- 특정 사원이 참여하고 있는 프로젝트 목록 조회 -->
    <select id="getProjectsByEmpNum" parameterType="String" resultMap="ProjectResultMap">
        SELECT p.*, d.name AS dep_name, e.name AS manager_name
        FROM projects p
                 LEFT JOIN departments d ON p.dep_id = d.id
                 LEFT JOIN employees e ON p.manager_emp_num = e.emp_num
                 INNER JOIN project_members pm ON p.id = pm.project_id
        WHERE pm.emp_num = #{empNum}
        ORDER BY p.created_at DESC
    </select>

    <!-- 특정 부서의 프로젝트 목록 조회 -->
    <select id="getProjectsByDepartment" parameterType="Integer" resultMap="ProjectResultMap">
        SELECT p.*, d.name AS dep_name, e.name AS manager_name
        FROM projects p
                 LEFT JOIN departments d ON p.dep_id = d.id
                 LEFT JOIN employees e ON p.manager_emp_num = e.emp_num
        WHERE p.dep_id = #{depId}
        ORDER BY p.created_at DESC
    </select>

    <!-- 프로젝트 이름으로 검색 -->
    <select id="searchProjectsByName" parameterType="String" resultMap="ProjectResultMap">
        SELECT p.*, d.name AS dep_name, e.name AS manager_name
        FROM projects p
                 LEFT JOIN departments d ON p.dep_id = d.id
                 LEFT JOIN employees e ON p.manager_emp_num = e.emp_num
        WHERE p.name LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY p.created_at DESC
    </select>

    <!-- 최근 생성된 프로젝트 목록 조회 -->
    <select id="getRecentProjects" parameterType="Integer" resultMap="ProjectResultMap">
        SELECT p.*, d.name AS dep_name, e.name AS manager_name
        FROM projects p
                 LEFT JOIN departments d ON p.dep_id = d.id
                 LEFT JOIN employees e ON p.manager_emp_num = e.emp_num
        ORDER BY p.created_at DESC
            LIMIT #{limit}
    </select>

    <!-- 공개 상태인 프로젝트 목록 조회 -->
    <select id="getPublicProjects" resultMap="ProjectResultMap">
        SELECT p.*, d.name AS dep_name, e.name AS manager_name
        FROM projects p
        LEFT JOIN departments d ON p.dep_id = d.id
        LEFT JOIN employees e ON p.manager_emp_num = e.emp_num
        WHERE p.status != '완료'  <!-- is_public = 1 대신 상태로 필터링 -->
        ORDER BY p.created_at DESC
    </select>

    <!-- 새 프로젝트 등록 -->
    <insert id="insertProject" parameterType="com.example.projectdemo.domain.projects.dto.ProjectDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO projects (
            name, description, status, start_date, end_date, actual_end_date, dep_id,
            manager_emp_num, progress, is_public, created_at
        ) VALUES (
                     #{name}, #{description}, #{status}, #{startDate}, #{endDate}, #{actualEndDate}, #{depId},
                     #{managerEmpNum}, #{progress}, #{isPublic}, NOW()
                 )
    </insert>

    <!-- 프로젝트 정보 수정 -->
    <update id="updateProject" parameterType="com.example.projectdemo.domain.projects.dto.ProjectDTO">
        UPDATE projects
        SET name = #{name},
            description = #{description},
            status = #{status},
            start_date = #{startDate},
            end_date = #{endDate},
            actual_end_date = #{actualEndDate},
            dep_id = #{depId},
            manager_emp_num = #{managerEmpNum},
            progress = #{progress},
            is_public = #{isPublic},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 프로젝트 상태 변경 -->
    <update id="updateProjectStatus">
        UPDATE projects
        SET status = #{status},
            updated_at = NOW()
        WHERE id = #{projectId}
    </update>

    <!-- 프로젝트 삭제 -->
    <delete id="deleteProject" parameterType="Integer">
        DELETE FROM projects
        WHERE id = #{id}
    </delete>

    <!-- 프로젝트 멤버 조회 -->
    <select id="getProjectMembers" parameterType="Integer" resultMap="ProjectMemberResultMap">
        SELECT pm.*, e.name, d.name AS dep_name, p.title AS pos_title
        FROM project_members pm
                 INNER JOIN employees e ON pm.emp_num = e.emp_num
                 LEFT JOIN departments d ON e.dep_id = d.id
                 LEFT JOIN positions p ON e.pos_id = p.id
        WHERE pm.project_id = #{projectId}
        ORDER BY pm.role ASC, e.name ASC
    </select>

    <!-- 프로젝트 멤버 추가 -->
    <insert id="insertProjectMember" parameterType="com.example.projectdemo.domain.projects.dto.ProjectMemberDTO">
        INSERT INTO project_members (
            project_id, emp_num, role, joined_at
        ) VALUES (
                     #{projectId}, #{empNum}, #{role}, NOW()
                 )
    </insert>

    <!-- 프로젝트 멤버 역할 변경 -->
    <update id="updateProjectMemberRole">
        UPDATE project_members
        SET role = #{role}
        WHERE project_id = #{projectId} AND emp_num = #{empNum}
    </update>

    <!-- 프로젝트 멤버 삭제 -->
    <delete id="deleteProjectMember">
        DELETE FROM project_members
        WHERE project_id = #{projectId} AND emp_num = #{empNum}
    </delete>

</mapper>