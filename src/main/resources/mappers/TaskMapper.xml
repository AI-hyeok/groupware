<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.projectdemo.domain.projects.mapper.TaskMapper">

    <!-- 업무 기본 결과 매핑 -->
    <resultMap id="TaskResultMap" type="com.example.projectdemo.domain.projects.dto.TaskDTO">
        <id property="id" column="id" />
        <result property="projectId" column="project_id" />
        <result property="projectName" column="project_name" />
        <result property="title" column="title" />
        <result property="description" column="description" />
        <result property="status" column="status" />
        <result property="progress" column="progress" />
        <result property="priority" column="priority" />
        <result property="reporterEmpNum" column="reporter_emp_num" />
        <result property="reporterName" column="reporter_name" />
        <result property="assigneeEmpNum" column="assignee_emp_num" />
        <result property="assigneeName" column="assignee_name" />
        <result property="startDate" column="start_date" />
        <result property="dueDate" column="due_date" />
        <result property="estimatedHours" column="estimated_hours" />
        <result property="actualHours" column="actual_hours" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="completedAt" column="completed_at" />
    </resultMap>

    <!-- 하위 업무 기본 결과 매핑 -->
    <resultMap id="SubTaskResultMap" type="com.example.projectdemo.domain.projects.dto.SubTaskDTO">
        <id property="id" column="id" />
        <result property="taskId" column="task_id" />
        <result property="title" column="title" />
        <result property="description" column="description" />
        <result property="completed" column="completed" />
        <result property="assigneeEmpNum" column="assignee_emp_num" />
        <result property="assigneeName" column="assignee_name" />
        <result property="dueDate" column="due_date" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="completedAt" column="completed_at" />
    </resultMap>

    <!-- 업무 로그 기본 결과 매핑 -->
    <resultMap id="TaskLogResultMap" type="com.example.projectdemo.domain.projects.dto.TaskLogDTO">
        <id property="id" column="id" />
        <result property="taskId" column="task_id" />
        <result property="empNum" column="emp_num" />
        <result property="empName" column="emp_name" />
        <result property="logType" column="log_type" />
        <result property="oldValue" column="old_value" />
        <result property="newValue" column="new_value" />
        <result property="comment" column="comment" />
        <result property="createdAt" column="created_at" />
        <result property="taskTitle" column="task_title" />
    </resultMap>

    <!-- 모든 업무 조회 -->
    <select id="getAllTasks" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        ORDER BY t.created_at DESC
    </select>

    <!-- 업무 ID로 업무 조회 -->
    <select id="getTaskById" parameterType="Integer" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        WHERE t.id = #{taskId}
    </select>

    <!-- 프로젝트 ID로 업무 목록 조회 -->
    <select id="getTasksByProject" parameterType="Integer" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        WHERE t.project_id = #{projectId}
        ORDER BY t.due_date ASC, t.priority DESC
    </select>

    <!-- 특정 사원이 담당하는 업무 목록 조회 -->
    <select id="getTasksByAssignee" parameterType="String" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        WHERE t.assignee_emp_num = #{empNum}
        ORDER BY t.due_date ASC, t.priority DESC
    </select>

    <!-- 특정 사원이 생성한 업무 목록 조회 -->
    <select id="getTasksByCreator" parameterType="String" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        WHERE t.reporter_emp_num = #{empNum}
        ORDER BY t.created_at DESC
    </select>

    <!-- 최근 생성된 업무 목록 조회 -->
    <select id="getRecentTasks" parameterType="Integer" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        ORDER BY t.created_at DESC
            LIMIT #{limit}
    </select>

    <!-- 특정 사원의 최근 업무 목록 조회 -->
    <select id="getRecentTasksByEmpNum" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        WHERE t.assignee_emp_num = #{empNum} OR t.reporter_emp_num = #{empNum}
        ORDER BY t.created_at DESC
            LIMIT #{limit}
    </select>

    <!-- 특정 프로젝트의 특정 상태 업무 목록 조회 -->
    <select id="getTasksByStatus" resultMap="TaskResultMap">
        SELECT t.*, p.name AS project_name,
               reporter.name AS reporter_name,
               assignee.name AS assignee_name
        FROM tasks t
                 INNER JOIN projects p ON t.project_id = p.id
                 LEFT JOIN employees reporter ON t.reporter_emp_num = reporter.emp_num
                 LEFT JOIN employees assignee ON t.assignee_emp_num = assignee.emp_num
        WHERE t.project_id = #{projectId} AND t.status = #{status}
        ORDER BY t.due_date ASC, t.priority DESC
    </select>

    <!-- 새 업무 등록 -->
    <insert id="insertTask" parameterType="com.example.projectdemo.domain.projects.dto.TaskDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tasks (
            project_id, title, description, status, progress, priority,
            reporter_emp_num, assignee_emp_num, start_date, due_date,
            estimated_hours, actual_hours, created_at
        ) VALUES (
                     #{projectId}, #{title}, #{description}, #{status}, #{progress}, #{priority},
                     #{reporterEmpNum}, #{assigneeEmpNum}, #{startDate}, #{dueDate},
                     #{estimatedHours}, #{actualHours}, NOW()
                 )
    </insert>

    <!-- 업무 정보 수정 -->
    <update id="updateTask" parameterType="com.example.projectdemo.domain.projects.dto.TaskDTO">
        UPDATE tasks
        SET project_id = #{projectId},
            title = #{title},
            description = #{description},
            status = #{status},
            progress = #{progress},
            priority = #{priority},
            assignee_emp_num = #{assigneeEmpNum},
            start_date = #{startDate},
            due_date = #{dueDate},
            estimated_hours = #{estimatedHours},
            actual_hours = #{actualHours},
            updated_at = NOW(),
            completed_at = #{completedAt}
        WHERE id = #{id}
    </update>

    <!-- 업무 상태 변경 -->
    <update id="updateTaskStatus">
        UPDATE tasks
        SET status = #{status},
            updated_at = NOW(),
            completed_at = CASE
                               WHEN #{status} = '완료' THEN NOW()
                               ELSE completed_at
                END
        WHERE id = #{taskId}
    </update>

    <!-- 업무 진행률 업데이트 -->
    <update id="updateTaskProgress">
        UPDATE tasks
        SET progress = #{progress},
            updated_at = NOW(),
            status = CASE
                         WHEN #{progress} = 100 THEN '완료'
                         WHEN #{progress} > 0 THEN '진행중'
                         ELSE status
                END,
            completed_at = CASE
                               WHEN #{progress} = 100 THEN NOW()
                               ELSE completed_at
                END
        WHERE id = #{taskId}
    </update>

    <!-- 업무 삭제 -->
    <delete id="deleteTask" parameterType="Integer">
        DELETE FROM tasks
        WHERE id = #{taskId}
    </delete>

    <!-- 하위 업무 목록 조회 -->
    <select id="getSubTasksByTask" parameterType="Integer" resultMap="SubTaskResultMap">
        SELECT st.*, e.name AS assignee_name
        FROM sub_tasks st
                 LEFT JOIN employees e ON st.assignee_emp_num = e.emp_num
        WHERE st.task_id = #{taskId}
        ORDER BY st.completed ASC, st.due_date ASC
    </select>

    <!-- 하위 업무 ID로 조회 -->
    <select id="getSubTaskById" parameterType="Integer" resultMap="SubTaskResultMap">
        SELECT st.*, e.name AS assignee_name
        FROM sub_tasks st
                 LEFT JOIN employees e ON st.assignee_emp_num = e.emp_num
        WHERE st.id = #{subTaskId}
    </select>

    <!-- 하위 업무 등록 -->
    <insert id="insertSubTask" parameterType="com.example.projectdemo.domain.projects.dto.SubTaskDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sub_tasks (
            task_id, title, description, completed, assignee_emp_num,
            due_date, created_at
        ) VALUES (
                     #{taskId}, #{title}, #{description}, #{completed}, #{assigneeEmpNum},
                     #{dueDate}, NOW()
                 )
    </insert>

    <!-- 하위 업무 수정 -->
    <update id="updateSubTask" parameterType="com.example.projectdemo.domain.projects.dto.SubTaskDTO">
        UPDATE sub_tasks
        SET title = #{title},
            description = #{description},
            completed = #{completed},
            assignee_emp_num = #{assigneeEmpNum},
            due_date = #{dueDate},
            updated_at = NOW(),
            completed_at = CASE
                               WHEN #{completed} = true THEN NOW()
                               ELSE completed_at
                END
        WHERE id = #{id}
    </update>

    <!-- 하위 업무 삭제 -->
    <delete id="deleteSubTask" parameterType="Integer">
        DELETE FROM sub_tasks
        WHERE id = #{subTaskId}
    </delete>

    <!-- 하위 업무 상태 변경 -->
    <update id="updateSubTaskStatus">
        UPDATE sub_tasks
        SET completed = CASE
                            WHEN #{status} = '완료' THEN true
                            ELSE false
            END,
            updated_at = NOW(),
            completed_at = CASE
                               WHEN #{status} = '완료' THEN NOW()
                               ELSE null
                END
        WHERE id = #{subTaskId}
    </update>

    <!-- 업무 로그 조회 -->
    <select id="getTaskLogs" parameterType="Integer" resultMap="TaskLogResultMap">
        SELECT tl.*, t.title AS task_title, e.name AS emp_name
        FROM task_logs tl
                 LEFT JOIN tasks t ON tl.task_id = t.id
                 LEFT JOIN employees e ON tl.emp_num = e.emp_num
        WHERE tl.task_id = #{taskId}
        ORDER BY tl.created_at DESC
    </select>

    <!-- 업무 로그 추가 -->
    <insert id="insertTaskLog" parameterType="com.example.projectdemo.domain.projects.dto.TaskLogDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_logs (
            task_id, emp_num, log_type, old_value, new_value, comment, created_at
        ) VALUES (
                     #{taskId}, #{empNum}, #{logType}, #{oldValue}, #{newValue}, #{comment}, #{createdAt}
                 )
    </insert>

</mapper>