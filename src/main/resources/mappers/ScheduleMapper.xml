<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.projectdemo.domain.projects.mapper.ScheduleMapper">

    <!-- 일정 기본 결과 매핑 -->
    <resultMap id="ScheduleResultMap" type="com.example.projectdemo.domain.projects.dto.ScheduleDTO">
        <id property="id" column="id"/>
        <result property="empNum" column="emp_num"/>
        <result property="creatorEmpNum" column="creator_emp_num"/>
        <result property="creatorName" column="creator_name"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="location" column="location"/>
        <result property="startTime" column="start_time"/>
        <result property="endTime" column="end_time"/>
        <result property="allDay" column="all_day"/>
        <result property="projectId" column="project_id"/>
        <result property="projectName" column="project_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 일정 참석자 매핑 -->
    <resultMap id="ScheduleParticipantResultMap" type="com.example.projectdemo.domain.projects.dto.ScheduleParticipantDTO">
        <id property="scheduleId" column="schedule_id"/>
        <id property="empNum" column="emp_num"/>
        <result property="empName" column="emp_name"/>
        <result property="status" column="status"/>
        <result property="joinedAt" column="joined_at"/>
    </resultMap>

    <!-- 전체 일정 조회 -->
    <select id="findAllSchedules" resultMap="ScheduleResultMap">
        SELECT s.*, e.name AS creator_name, p.name AS project_name
        FROM schedules s
                 LEFT JOIN employees e ON s.creator_emp_num = e.emp_num
                 LEFT JOIN projects p ON s.project_id = p.id
        ORDER BY s.start_time ASC
    </select>

    <!-- 사원 일정 조회 -->
    <select id="findSchedulesByEmpNum" parameterType="String" resultMap="ScheduleResultMap">
        SELECT s.*, e.name AS creator_name, p.name AS project_name
        FROM schedules s
                 LEFT JOIN employees e ON s.creator_emp_num = e.emp_num
                 LEFT JOIN projects p ON s.project_id = p.id
        WHERE s.emp_num = #{empNum} OR s.creator_emp_num = #{empNum}
           OR EXISTS (
            SELECT 1 FROM schedule_participants sp
            WHERE sp.schedule_id = s.id AND sp.emp_num = #{empNum}
        )
        ORDER BY s.start_time ASC
    </select>

    <!-- 특정 프로젝트의 일정 조회 -->
    <select id="selectSchedulesByProject" parameterType="Integer" resultMap="ScheduleResultMap">
        SELECT s.*, e.name AS creator_name, p.name AS project_name
        FROM schedules s
                 LEFT JOIN employees e ON s.creator_emp_num = e.emp_num
                 LEFT JOIN projects p ON s.project_id = p.id
        WHERE s.project_id = #{projectId}
        ORDER BY s.start_time ASC
    </select>

    <!-- 특정 사원의 일정 조회 -->
    <select id="selectSchedulesByEmployee" parameterType="String" resultMap="ScheduleResultMap">
        SELECT s.*, e.name AS creator_name, p.name AS project_name
        FROM schedules s
                 LEFT JOIN employees e ON s.creator_emp_num = e.emp_num
                 LEFT JOIN projects p ON s.project_id = p.id
        WHERE s.creator_emp_num = #{empNum}
           OR EXISTS (
            SELECT 1 FROM schedule_participants sp
            WHERE sp.schedule_id = s.id AND sp.emp_num = #{empNum}
        )
        ORDER BY s.start_time ASC
    </select>

    <!-- 특정 기간의 일정 조회 -->
    <select id="selectSchedulesByDateRange" resultMap="ScheduleResultMap">
        SELECT s.*, e.name AS creator_name, p.name AS project_name
        FROM schedules s
                 LEFT JOIN employees e ON s.creator_emp_num = e.emp_num
                 LEFT JOIN projects p ON s.project_id = p.id
        WHERE
            (s.start_time BETWEEN #{startDate} AND #{endDate})
           OR (s.end_time BETWEEN #{startDate} AND #{endDate})
           OR (s.start_time &lt;= #{startDate} AND s.end_time &gt;= #{endDate})
        ORDER BY s.start_time ASC
    </select>

    <!-- 일정 ID로 조회 -->
    <select id="selectScheduleById" parameterType="Integer" resultMap="ScheduleResultMap">
        SELECT s.*, e.name AS creator_name, p.name AS project_name
        FROM schedules s
                 LEFT JOIN employees e ON s.creator_emp_num = e.emp_num
                 LEFT JOIN projects p ON s.project_id = p.id
        WHERE s.id = #{id}
    </select>

    <!-- 일정 등록 -->
    <insert id="insertSchedule" parameterType="com.example.projectdemo.domain.projects.dto.ScheduleDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO schedules (
            creator_emp_num, title, description, location,
            start_time, end_time, all_day, project_id, created_at
        ) VALUES (
                     #{creatorEmpNum}, #{title}, #{description}, #{location},
                     #{startTime}, #{endTime}, #{allDay}, #{projectId}, NOW()
                 )
    </insert>

    <!-- 일정 수정 -->
    <update id="updateSchedule" parameterType="com.example.projectdemo.domain.projects.dto.ScheduleDTO">
        UPDATE schedules
        SET title = #{title},
            description = #{description},
            location = #{location},
            start_time = #{startTime},
            end_time = #{endTime},
            all_day = #{allDay},
            project_id = #{projectId},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 일정 삭제 -->
    <delete id="deleteSchedule" parameterType="Integer">
        DELETE FROM schedules
        WHERE id = #{id}
    </delete>

    <!-- 일정 참석자 목록 조회 -->
    <select id="selectScheduleParticipants" parameterType="Integer" resultMap="ScheduleParticipantResultMap">
        SELECT sp.*, e.name AS emp_name
        FROM schedule_participants sp
                 LEFT JOIN employees e ON sp.emp_num = e.emp_num
        WHERE sp.schedule_id = #{scheduleId}
        ORDER BY sp.status, e.name
    </select>

    <!-- 일정 참석자 추가 -->
    <insert id="insertScheduleParticipant" parameterType="com.example.projectdemo.domain.projects.dto.ScheduleParticipantDTO">
        INSERT INTO schedule_participants (schedule_id, emp_num, status, joined_at)
        VALUES (#{scheduleId}, #{empNum}, #{status}, NOW())
    </insert>

    <!-- 일정 참석자 상태 변경 -->
    <update id="updateParticipantStatus">
        UPDATE schedule_participants
        SET status = #{status}
        WHERE schedule_id = #{scheduleId} AND emp_num = #{empNum}
    </update>

    <!-- 일정 참석자 삭제 -->
    <delete id="deleteScheduleParticipant">
        DELETE FROM schedule_participants
        WHERE schedule_id = #{scheduleId} AND emp_num = #{empNum}
    </delete>

    <!-- 일정 참석자 정보 조회 -->
    <select id="selectScheduleParticipant" resultType="com.example.projectdemo.domain.projects.dto.ScheduleParticipantDTO">
        SELECT sp.*, e.name AS emp_name
        FROM schedule_participants sp
                 LEFT JOIN employees e ON sp.emp_num = e.emp_num
        WHERE sp.schedule_id = #{scheduleId} AND sp.emp_num = #{empNum}
    </select>
</mapper>