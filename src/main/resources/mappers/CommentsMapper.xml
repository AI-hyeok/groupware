<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.projectdemo.domain.board.mapper.CommentsMapper">

    <resultMap id="commentWithUserInfo" type="com.example.projectdemo.domain.board.entity.Comments">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="empId" column="emp_id"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="parentId" column="parent_id"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
        <!-- 작성자 이름 매핑 -->
        <result property="empName" column="emp_name"/>
        <!-- 작성자 프로필 이미지 url 매핑 -->
        <result property="profileImgUrl" column="profile_img_url"/>
    </resultMap>

    <!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="com.example.projectdemo.domain.board.entity.Comments" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comments (post_id, emp_id, content, created_at, parent_id)
        VALUES (#{postId}, #{empId}, #{content}, NOW(), #{parentId})
    </insert>

    <!-- 게시글의 모든 댓글 조회 -->
    <select id="findByPostId" resultMap="commentWithUserInfo">
        SELECT c.*, e.name AS emp_name, e.profile_img_url
        FROM comments c
                 LEFT JOIN employees e ON c.emp_id = e.id
        WHERE c.post_id = #{postId}
        ORDER BY
            CASE WHEN c.parent_id IS NULL THEN c.id ELSE c.parent_id END ASC,
            c.parent_id IS NOT NULL ASC,
            c.created_at ASC
    </select>

    <!-- 특정 댓글 조회 -->
    <select id="findById" resultMap="commentWithUserInfo">
        SELECT c.*, e.name as empName
        FROM comments c
                 JOIN employees e ON c.emp_id = e.id
        WHERE c.id = #{id}
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComments" parameterType="com.example.projectdemo.domain.board.entity.Comments">
        UPDATE comments
        SET content = #{content}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 댓글 삭제 (논리적 삭제) -->
    <update id="deleteComment">
        UPDATE comments
        SET is_deleted = 1
        WHERE id = #{id}
    </update>
</mapper>