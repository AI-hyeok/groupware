<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.projectdemo.domain.contact.mapper.ContactMapper">
    <!-- 모든 사원의 연락처 정보 조회 -->
    <select id="findAllEmpContacts" resultType="com.example.projectdemo.domain.contact.dto.EmployeeContactDTO">
        SELECT
            employees.emp_num,
            employees.name,
            employees.internal_email,
            employees.phone,
            employees.dep_id,
            departments.name AS dep_name,
            employees.pos_id,
            positions.title AS pos_title
        FROM
            employees
                JOIN
            departments
            ON
                employees.dep_id = departments.id
                JOIN
            positions
            ON
                employees.pos_id = positions.id
        ORDER BY
            employees.name;
    </select>


    <!-- 부서별 공유주소록(사원연락처) 조회 -->
    <select id="findEmpContactsByDepartment" resultType="com.example.projectdemo.domain.contact.dto.EmployeeContactDTO">
        SELECT
            employees.emp_num,
            employees.name,
            employees.internal_email,
            employees.phone,
            employees.dep_id,
            departments.name AS dep_name,
            employees.pos_id,
            positions.title AS pos_title
        FROM
            employees
                JOIN
            departments
            ON
                employees.dep_id = departments.id
                JOIN
            positions
            ON
                employees.pos_id = positions.id
        WHERE
            departments.name = #{depName}
        ORDER BY
            employees.name;
    </select>

    <!-- 부서별 공유주소록(사원연락처) 조회 -->
    <insert id="insertPersonalContact">
        INSERT INTO
            personal_contacts (emp_id, name, email, phone, memo)
        VALUES
            (#{contact.empId}, #{contact.name}, #{contact.email}, #{contact.phone}, #{contact.memo})
    </insert>

    <!-- 개인 주소록(사원 연락처) 조회 -->
    <select id="findPersonalContactsByEmpId" resultType="com.example.projectdemo.domain.contact.dto.PersonalContactDTO">
        SELECT *
        FROM personal_contacts
        WHERE emp_id = #{empId}
    </select>

    <!-- 개인주소록 연락처 삭제 -->
    <delete id="deleteContactsByIds">
        DELETE FROM
            personal_contacts
        WHERE id IN
            <foreach collection="ids" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
    </delete>

    <!-- 개인주소록 연락처 수정 -->
    <update id="updatePersonalContact" parameterType="com.example.projectdemo.domain.contact.dto.PersonalContactDTO">
        UPDATE personal_contacts
        SET
            name = #{contact.name},
            email = #{contact.email},
            phone = #{contact.phone},
            memo = #{contact.memo}
        WHERE id = #{contact.id}
    </update>

    <!-- 공유 주소록 검색: 이름, 내부 이메일, 전화번호, 부서명을 대상으로 LIKE 검색 -->
    <select id="searchSharedContacts" resultType="com.example.projectdemo.domain.contact.dto.EmployeeContactDTO">
        SELECT
            employees.emp_num,
            employees.name,
            employees.internal_email,
            employees.phone,
            employees.dep_id,
            departments.name AS dep_name,
            employees.pos_id,
            positions.title AS pos_title
        FROM
            employees
                JOIN departments ON employees.dep_id = departments.id
                JOIN positions ON employees.pos_id = positions.id
        WHERE
            employees.name LIKE #{queryPattern}
           OR employees.internal_email LIKE #{queryPattern}
           OR employees.phone LIKE #{queryPattern}
           OR departments.name LIKE #{queryPattern}
        ORDER BY
            employees.name;
    </select>

    <!-- 개인 주소록 검색: 이름, 이메일, 전화번호, 메모를 대상으로 LIKE 검색 -->
    <select id="searchPersonalContacts" resultType="com.example.projectdemo.domain.contact.dto.PersonalContactDTO">
        SELECT *
        FROM personal_contacts
        WHERE emp_id = #{empId}
          AND (
            name LIKE #{queryPattern}
                OR email LIKE #{queryPattern}
                OR phone LIKE #{queryPattern}
                OR memo LIKE #{queryPattern}
            )
        ORDER BY name;
    </select>


    <!-- 사원 연락처 정보 roundcube 공유 주소록에 추가 -->
    <insert id="insertSharedContact" parameterType="com.example.projectdemo.domain.contact.dto.RoundcubeContactDTO">
        INSERT INTO roundcube.contacts (
            changed, del, name, email, firstname, vcard, words, user_id
        )
        SELECT
            NOW(),
            0,
            #{name},
            #{email},
            #{firstname},
            #{vcard},
            #{words},
            u.user_id
        FROM roundcube.users u
        WHERE u.username = 'global_addressbook@techx.kro.kr'
    </insert>

</mapper>